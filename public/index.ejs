<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport"
    content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no">
  <title>SkoHub</title>
  <meta name="description"
    content="SkoHub seeks to implement a novel approach in syndicating content on the web by combining current web standards for sending notifications and subscribing to feeds with knowledge organization systems (KOS, sometimes also called “controlled vocabularies”)">
  <link rel="shortcut icon" href="https://skohub-io.github.io/skohub.io/img/skohub-icon.png" type="image/x-icon">
  <link href="css/style.css" rel="stylesheet" type="text/css" media="all">
</head>

<body>
  <div class="content">
    <!-- header start -->
    <header role="banner">
      <div class="wrapper">
        <div class="header-content">
          <span class="portal-logo"><a href="index.html"><img
                src="https://skohub-io.github.io/skohub.io/img/skohub-logo-color.svg" />SkoHub</a></span>
        </div>
      </div>
    </header>
    <!-- header end -->

    <!-- main start -->
    <main role="main">
      <section class="introduction">
        <h1>Unleash the full potential of controlled vocabularies in reconciliation</h1>
      </section>
      <section class="keyvisual-content">
        <div class="uploadForm">
          <form action="/upload" enctype="multipart/form-data" method="post">
            <div class="form-group">
              <label for="account">Account for Dataset
                  <a title="Please provide the same account for all your uploads. The account is part of the reconcile service url.">❓</a>
              </label>
              <input type="text" id="account" name="account" required />
              <label for="language">Language to use for Reconciliation
                <a title="Reconciliation is done against a specific language. So tell us what language of your vocabulary we should use.">❓</a>
                </label>
              <input type="text" id="language" name="language" required placeholder="e.g. de" />
              <label for="file_upload">
                Please select a file to upload (.ttl)
              </label>
              <input type="file" id="file_upload" class="form-control-file" name="uploaded_file" />
              <input type="hidden" name="id" id="id" value="" />
              <label for="fileUrl">...or provide link to Turtle File (<a href="https://raw.githubusercontent.com/dini-ag-kim/hochschulfaechersystematik/master/hochschulfaechersystematik.ttl">Example</a>)</label>
              <input type="text" id="fileUrl" name="fileUrl" />
              <input disabled type="submit" value="Upload File to Reconcile Service!" class="btn btn-default" />
            </div>
          </form>
        </div>
        <div id="result">
          <div id="spinner" class="lds-ring">
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
          <div id="checkmark" class="hidden">
            <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
              <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none" />
              <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
            </svg>
          </div>
        </div>
      </section>
      <section class="keyvisual-content">
        <p>Test out these URLs as examples in your favorite reconcile spec compliant service (click to copy):</p>
        <input data-url="https://reconcile-test.skohub.io/reconcile?language=de&account=kim&dataset=https://w3id.org/kim/hochschulfaechersystematik/scheme" type="button" value="Hochschulfächersystematik (german)" class="btn example-url"/>
        <input data-url="https://reconcile-test.skohub.io/reconcile?language=en&account=nalt-test&dataset=https://lod.nal.usda.gov/nalt-core" type="button" value="AgroVoc (english)" class="btn example-url" />
          <p>or see <a href="<%= data.reconcileUrl %>/vocabs">all uploaded vocabularies</a>.</p>
      </section>

    </main>
    <!-- main end -->
  </div>
  <!-- footer start -->
  <footer class="footer" role="contentinfo">
    <div class="wrapper">
      <div class="footer">
        <section class="footer-columnset">
          <article>
            <span class="sponsor-logo"><a target="_blank" href="https://www.hbz-nrw.de"><img
                  src="https://skohub-io.github.io/skohub.io/img/logo-hbz-white.svg" width="120px"></a></span>
          </article>
          <article>
            <ul class="footer-nav">
              <li><a target="_blank" href="https://www.hbz-nrw.de/impressum">Imprint</a></li>
              <li><a href="mailto:skohub@hbz-nrw.de">skohub@hbz-nrw.de</a></li>
              <li><a target="_blank" href="https://socialhub.activitypub.rocks/c/software/skohub">Discourse</a></li>
              <li><a target="_blank" href="https://github.com/skohub-io/skohub.io/issues">Issues</a></li>
            </ul>
          </article>
          <article>
            <span class="portal-footer-logo"><a href="index.html"><img
                  src="https://skohub-io.github.io/skohub.io/img/skohub-signet-color.svg" width="40px"></a></span>
          </article>
        </section>
      </div>
    </div>
  </footer>

</body>

<script>
  const uploadForm = document.querySelector(".uploadForm")
  const account = document.querySelector("#account")
  const language = document.querySelector("#language")
  const file_upload = document.querySelector("#file_upload")
  const fileUrl = document.querySelector("#fileUrl")
  const id = document.querySelector("#id")
  const submit = document.querySelector("input[type=submit]")
  const spinner = document.querySelector("#spinner")
  const checkmark = document.querySelector("#checkmark")
  const result = document.querySelector("#result")
  const exampleUrlButton = document.querySelectorAll("input.btn.example-url")

  const url = new URL(window.location.href)
  const idParam = url.searchParams.get("id")

  const buildReconcileUrl = (serviceUrl, account, dataset, language) => `${serviceUrl}/reconcile?language=${language}&account=${account}&dataset=${dataset}`

  id.value = crypto.randomUUID()

  function disableSubmit() {
    if (account.value.length > 0 && language.value.length > 0 && (file_upload.value.length > 0 || fileUrl.value.length > 0)) {
      submit.removeAttribute("disabled")
    } else {
      submit.setAttribute("disabled", "disabled")
    }
  }

  function copyUrl(e) {
    const url = e.target.dataset.url
    navigator.clipboard.writeText(url).then(function() {
      console.log('Copied!');
    }, function() {
      console.log('Copy error')
    });
  }

  function validateInput() {
    const input = document.getElementById("language");
    const value = input.value;
    const pattern = /^[a-zA-Z]{2}$/; // regular expression to match only a-z and A-Z

    if (!pattern.test(value)) {
      input.setCustomValidity("Invalid input. Only letters (a-z) and two characters are allowed.");
    } else {
      input.setCustomValidity("");
    }
    input.reportValidity();
  }

  account.addEventListener("input", (e) => {
    disableSubmit()
  })

  language.addEventListener("input", (e) => {
    validateInput()
    disableSubmit()
  })

  file_upload.addEventListener("input", (e) => {
    disableSubmit()
  })

  fileUrl.addEventListener("input", (e) => {
    disableSubmit()
  })

  submit.addEventListener("click", (e) => {
    spinner.style.display = "inline-block"
    getData()
  })

  exampleUrlButton.forEach(b => b.addEventListener("click", copyUrl))


  const getData = async () => {
    try {
      const response = await fetch(`./log/${id.value}.json`)
      const data = await response.json()
      renderData(data)
    } catch (error) {
      setTimeout(getData, 1000)
    }
  }

  const renderData = (data) => {

    uploadForm.style.display = "none"


    if (data.status === "processing") {
      setTimeout(getData, 1000)
    } else {
      spinner.style.display = "none"
      checkmark.classList.remove("hidden")
      reconcileUrl = buildReconcileUrl(data.reconcile_service_url, data.account, data.dataset, data.language)
      reconcileUrlLink = document.createElement("a")
      reconcileUrlLink.setAttribute("href", reconcileUrl)
      reconcileUrlLink.setAttribute("target", "_blank")
      reconcileUrlLink.innerHTML = reconcileUrl
      result.appendChild(reconcileUrlLink)

      // show number of entries
      if (data.numOfEntries) {
        const numOfEntries = document.createElement("p")
        numOfEntries.innerHTML = `ℹ️ Added a dataset with ${data.numOfEntries} entries.`
        result.appendChild(numOfEntries)
      }

      // add a button to return to root page saying "Add another dataset"
      const button = document.createElement("button")
      button.setAttribute("class", "btn")
      button.innerHTML = "Add another dataset"
      button.style.display = "block"
      button.addEventListener("click", () => {
        window.location.href = "/"
      })
      result.appendChild(button)

      // add a notice that the service is currently in alpha
      const notice = document.createElement("p")
      notice.innerHTML = "⚠️ Note: This service is currently in Alpha and may go offline or uploaded data might get lost."
      result.appendChild(notice)
    }
  }

  if (idParam) {
    id.value = idParam
    getData()
  }

</script>

</html>
